import { useMutation } from "@tanstack/react-query";
import client from "./client";
import { typeLoginForm, typeLoginOTP, typeRegisterForm } from "@/utils/type.";
import Toastfiy from "@/components/toastfiy/Toastfiy";
import { setCookie } from "@/utils/cookie";

// register
const RegisterQuery = () => {
  return useMutation({
    mutationFn: (data: typeRegisterForm) => {
      return client.post(`/auth/register`, {
        name: data.name,
        mobile: data.mobile,
        email: data.email,
        password: data.password,
        password_verify: data.password_verify,
      });
    },

    onError: (
      error: Error & { data: { message: string; errorCode: number } }
    ) => {
      switch (error.data?.errorCode) {
        case 105:
          Toastfiy({
            message: "Ù‚Ø¨Ù„Ø§ Ø«Ø¨Øª Ù†Ø§Ù… Ú©Ø±Ø¯Ù‡ Ø§ÛŒØ¯",
            type: "info",
          });
          break;
        case 106:
          Toastfiy({
            message: "Ø±Ù…Ø² Ø¹Ø¨ÙˆØ± Ùˆ ØªÚ©Ø±Ø§Ø± Ø¢Ù† Ø¨Ø§Ù‡Ù… Ø¨Ø±Ø§Ø¨Ø± Ù†ÛŒØ³ØªÙ†Ø¯",
            type: "info",
          });
          break;
        case 107:
          Toastfiy({
            message: "Ø®Ø·Ø§ÛŒÛŒ Ø±Ø® Ø¯Ø§Ø¯Ù‡ Ø§Ø³ØªØŒ Ø¯ÙˆØ¨Ø§Ø±Ù‡ ØªÙ„Ø§Ø´ Ú©Ù†ÛŒØ¯",
            type: "warning",
          });
          break;
        default:
          break;
      }
    },
  });
};

// login with mobile , password
const LoginQuery = () => {
  return useMutation({
    mutationFn: (data: typeLoginForm) => {
      return client.post(`/auth/login`, {
        mobile: data.mobile,
        password: data.password,
      });
    },
    onSuccess: (data) => {
      if (data?.data && data.status === 200) {
        setCookie(data.data);
        location.replace(`/`);
      }
    },
    onError: (error) => {
      Toastfiy({
        message: "Ù…ÙˆØ¨Ø§ÛŒÙ„ Ùˆ ÛŒØ§ Ø±Ù…Ø² Ø¹Ø¨ÙˆØ± ØµØ­ÛŒØ­ Ù†ÛŒØ³Øª",
        type: "error",
      });
    },
  });
};

// login with otp code - send mobile and generate code in server
const LoginOTPQuery = () => {
  /// data => mobile for login
  return useMutation({
    mutationFn: (mobile: string) => {
      return client.post(`/auth/loginOTP`, {
        mobile: mobile,
      });
    },
  });
};

// verify code for login
const VerifyOTPQuery = () => {
  return useMutation({
    mutationFn: (data: typeLoginOTP) => {
      return client.post(`/auth/verify`, {
        mobile: data.mobile,
        code: Number(data.otpCode),
      });
    },
    onSuccess(data) {
      if (data?.data && data.status === 200) {
        setCookie(data.data);
        location.replace(`/`);
      }
    },
    onError: (
      error: Error & { data: { message: string; errorCode: number } }
    ) => {
      console.log("ðŸš€ ~ VerifyOTPQuery ~ error:", error);
      switch (error.data?.errorCode) {
        case 109:
          Toastfiy({
            message: "Ù…ÙˆØ¨Ø§ÛŒÙ„ Ùˆ ÛŒØ§ Ú©Ø¯ Ø§Ø­Ø±Ø§Ø² Ù†Ø§Ø¯Ø±Ø³Øª Ø§Ø³Øª",
            type: "error",
          });
          break;
        case 110:
          Toastfiy({
            message: "Ú©Ø¯ Ù†Ø§ÛŒÛŒØ¯ Ù…Ù†Ù‚Ø¶ÛŒ Ø´Ø¯Ù‡ Ø§Ø³Øª",
            type: "info",
          });
          break;
        case 107:
          Toastfiy({
            message: "Ø®Ø·Ø§ÛŒÛŒ Ø±Ø® Ø¯Ø§Ø¯Ù‡ Ø§Ø³ØªØŒ Ø¯ÙˆØ¨Ø§Ø±Ù‡ ØªÙ„Ø§Ø´ Ú©Ù†ÛŒØ¯",
            type: "warning",
          });
          break;
        case 111:
          Toastfiy({
            message: "Ø®Ø·Ø§ÛŒÛŒ Ø±Ø® Ø¯Ø§Ø¯Ù‡ Ø§Ø³ØªØŒ Ø¯ÙˆØ¨Ø§Ø±Ù‡ ØªÙ„Ø§Ø´ Ù†Ù…Ø§ÛŒÛŒØ¯",
            type: "warning",
          });
          break;
        case 112:
          Toastfiy({
            message: "Ø®Ø·Ø§ÛŒÛŒ Ø±Ø® Ø¯Ø§Ø¯Ù‡ Ø§Ø³ØªØŒ Ø¯ÙˆØ¨Ø§Ø±Ù‡ ØªÙ„Ø§Ø´ Ù†Ù…Ø§ÛŒÛŒØ¯",
            type: "warning",
          });
          break;

        default:
          break;
      }
    },
  });
};

export { RegisterQuery, LoginQuery, LoginOTPQuery, VerifyOTPQuery };
